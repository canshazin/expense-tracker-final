import { url } from "./main.js";
import { add_to_ui_leaderboard, add_to_ui_download } from "./ui.js";

async function buy_premium(e) {
  try {
    e.preventDefault();
    document.querySelector("#paypal_button_container").innerHTML = "";
    let paymentStatus = "pending";

    const response = await axios.get(`${url}/purchase/premium-membership`, {
      headers: { Authorization: localStorage.getItem("token") },
    });
    const order_id = response.data.id;
    async function set_up_paypal_button() {
      return new Promise((resolve, reject) => {
        paypal
          .Buttons({
            createOrder: async function () {
              return order_id;
            },
            onApprove: async function (data, actions) {
              console.log("Subscription approved:", data);
              try {
                const details = await actions.order.capture();
                console.log(details);
                const response = await axios.post(
                  `${url}/purchase/premium-membership/update`,
                  { flag: 1, payment_id: details.id, order_id: order_id },
                  {
                    headers: { Authorization: localStorage.getItem("token") },
                  }
                );
                console.log(response.data.msg);
                localStorage.setItem("token", response.data.token);
                paymentStatus = "success";
                resolve();
              } catch (err) {
                paymentStatus = "error";
                reject(err);
              }
            },
            onCancel: async function (data) {
              console.log("Subscription cancelled:", data);
              try {
                const response = await axios.post(
                  `${url}/purchase/premium-membership/update`,
                  { flag: 2, payment_id: data.orderID, order_id: order_id },
                  {
                    headers: { Authorization: localStorage.getItem("token") },
                  }
                );
                paymentStatus = "cancelled";
                resolve();
              } catch (err) {
                paymentStatus = "error";
                reject(err);
              }
            },
            onError: async function (err) {
              console.log("Subscription error:", err);
              try {
                const response = await axios.post(
                  `${url}/purchase/premium-membership/update`,
                  { flag: 3, payment_id: order_id, order_id: order_id },
                  {
                    headers: { Authorization: localStorage.getItem("token") },
                  }
                );
                console.log(response.data);
                paymentStatus = "error";
                reject(err);
              } catch (err) {
                paymentStatus = "error";
                reject(err);
              }
            },
          })
          .render("#paypal_button_container")
          .catch((err) => {
            paymentStatus = "error";
            reject(err);
          });
      });
    }

    async function handlePayPalTransaction() {
      try {
        await set_up_paypal_button();
        console.log(paymentStatus);
        checkPaymentStatus();
      } catch (err) {
        console.error("Error in PayPal transaction:", err);
        paymentStatus = "error";
        console.log(paymentStatus);
        checkPaymentStatus();
      }
    }

    handlePayPalTransaction();

    function checkPaymentStatus() {
      if (paymentStatus === "success") {
        document.querySelector("#paypal_button_container").innerHTML = "";
        alert("Transaction successful! Thank you for your purchase.");
        document.querySelector("#premium_btn").style.visibility = "hidden";
        document.querySelector("#prime_div").innerHTML = "You are a prime user";
        document.querySelector("#leaderboard_btn").style.visibility = "visible";
        document.querySelector("#download_btn").style.visibility = "visible";
        document.querySelector("#view_report_btn").style.visibility = "visible";
      } else if (paymentStatus === "cancelled") {
        alert("Transaction cancelled.");
      } else if (paymentStatus === "error") {
        alert("An error occurred during the transaction. Please try again.");
      }
    }
  } catch (err) {
    console.error("Error in buy_premium:", err);
    alert("An error occurred while setting up the payment. Please try again.");
  }
}

async function show_leaderboard(e) {
  try {
    e.preventDefault();
    document
      .querySelector("#leaderboard_list")
      .scrollIntoView({ behavior: "smooth" });
    document.querySelector("#leaderboard_heading").style.visibility = "visible";
    document.querySelector("#leaderboard_list").style.visibility = "visible";

    document.querySelector("#leaderboard_list").innerHTML = `<thead>
        <tr>
          <th>Rank</th>
          <th>Name</th>
          <th>Expense</th>
        </tr>
      </thead>`;
    const response = await axios.get(`${url}/premium/leaderboard`, {
      headers: { Authorization: localStorage.getItem("token") },
    });
    let rank = 1;
    response.data.forEach((expense) => {
      add_to_ui_leaderboard(expense, rank);
      rank += 1;
    });
  } catch (err) {
    console.log(err);
  }
}

async function download_expenses(e) {
  e.preventDefault();
  try {
    const response = await axios.get(`${url}/premium/download`, {
      headers: {
        Authorization: localStorage.getItem("token"),
      },
    });
    console.log(response);
    if (response.status == 200) {
      var a = document.createElement("a");
      a.href = response.data.file_url;
      const file = await axios.post(
        `${url}/premium/download/history/save`,
        { date: response.data.file_date, url: response.data.file_url },
        {
          headers: {
            Authorization: localStorage.getItem("token"),
          },
        }
      );
      a.download = "myExpense.txt";
      a.click();
      const table = document.querySelector("#download_list");
      table.style.visibility = "visible";
      document.querySelector("#download_list_heading").style.visibility =
        "visible";

      const date = new Date(file.data.date);
      const offset = 5.5;
      const india_date = new Date(date.getTime() + offset * 60 * 60 * 1000);

      const newRow = table.insertRow(0);
      newRow.insertCell(0).textContent = india_date.toISOString();
      newRow.insertCell(1).textContent = file.data.url;
    }
  } catch (err) {
    console.log(err);
    alert(err.message);
  }
}

export { buy_premium, show_leaderboard, download_expenses };
